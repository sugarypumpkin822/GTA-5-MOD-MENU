name: C/C++ Full CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }} - ${{ matrix.compiler }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang, msvc]
        build_type: [Debug, Release]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: macos-latest
            compiler: msvc
          - os: ubuntu-latest
            compiler: msvc

    env:
      BUILD_DIR: build

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up compiler
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        elif [[ "${{ matrix.compiler }}" == "clang" ]]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential clang

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake llvm || true

    - name: Set up MSVC environment
      if: matrix.compiler == 'msvc'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure with CMake
      run: >
        cmake -S . -B ${{ env.BUILD_DIR }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_VERBOSE_MAKEFILE=ON

    - name: Build project
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ matrix.build_type }}

    - name: Run tests
      run: |
        cd ${{ env.BUILD_DIR }}
        ctest --output-on-failure || echo "No tests found"

    - name: clang-format check
      if: matrix.compiler == 'clang' || matrix.compiler == 'gcc'
      run: |
        if command -v clang-format &>/dev/null; then
          find . -regex '.*\.\(c\|cpp\|h\|hpp\)' -exec clang-format --dry-run --Werror {} +
        else
          echo "clang-format not found; skipping formatting check"
        fi

    - name: Cache build
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.BUILD_DIR }}
        key: ${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          ${{ env.BUILD_DIR }}/**/*
